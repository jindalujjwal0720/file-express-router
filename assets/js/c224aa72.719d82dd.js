"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[19],{5137:(e,r,s)=>{s.r(r),s.d(r,{assets:()=>d,contentTitle:()=>l,default:()=>p,frontMatter:()=>o,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"tutorials/basic-api","title":"Basic API Server","description":"In this tutorial, you\u2019ll learn how to set up a basic API server using File Express Router. By the end, you\u2019ll have a working server with a few routes to handle HTTP requests.","source":"@site/docs/tutorials/basic-api.md","sourceDirName":"tutorials","slug":"/tutorials/basic-api","permalink":"/file-express-router/docs/tutorials/basic-api","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/basic-api.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Tutorials","permalink":"/file-express-router/docs/category/tutorials"},"next":{"title":"Authentication System","permalink":"/file-express-router/docs/tutorials/basic-authentication"}}');var t=s(4848),i=s(8453);const o={sidebar_position:1},l="Basic API Server",d={},a=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Initialize Your Project",id:"step-1-initialize-your-project",level:3},{value:"Step 2: Set Up the Project Structure",id:"step-2-set-up-the-project-structure",level:3},{value:"Step 3: Create the Entry Point (app.ts)",id:"step-3-create-the-entry-point-appts",level:3},{value:"Step 4: Create Your First Route",id:"step-4-create-your-first-route",level:3},{value:"Step 5: Add a Dynamic Route",id:"step-5-add-a-dynamic-route",level:3},{value:"Step 6: Start the Server",id:"step-6-start-the-server",level:3},{value:"Step 7: Test Your API",id:"step-7-test-your-api",level:3},{value:"Step 8: Add More Routes",id:"step-8-add-more-routes",level:3},{value:"Step 9: Add Middleware (Optional)",id:"step-9-add-middleware-optional",level:3},{value:"Step 10: Add Error Handling (Optional)",id:"step-10-add-error-handling-optional",level:3},{value:"Final Project Structure",id:"final-project-structure",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.header,{children:(0,t.jsx)(r.h1,{id:"basic-api-server",children:"Basic API Server"})}),"\n",(0,t.jsx)(r.p,{children:"In this tutorial, you\u2019ll learn how to set up a basic API server using File Express Router. By the end, you\u2019ll have a working server with a few routes to handle HTTP requests."}),"\n",(0,t.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,t.jsx)(r.p,{children:"Before starting, ensure you have the following installed:"}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsx)(r.li,{children:"Node.js"}),"\n",(0,t.jsx)(r.li,{children:"npm or yarn"}),"\n",(0,t.jsx)(r.li,{children:"TypeScript (optional but recommended)"}),"\n",(0,t.jsx)(r.li,{children:"A willingness to learn!"}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-1-initialize-your-project",children:"Step 1: Initialize Your Project"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Create a new directory for your project:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"mkdir basic-api-server\r\ncd basic-api-server\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Initialize a new Node.js project:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm init -y\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"Install the required dependencies:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install express file-express-router\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsx)(r.p,{children:"If you\u2019re using TypeScript, install TypeScript and the necessary types:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npm install --save-dev typescript @types/express\n"})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["\n",(0,t.jsxs)(r.p,{children:["Initialize a ",(0,t.jsx)(r.code,{children:"tsconfig.json"})," file (if using TypeScript):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npx tsc --init\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-2-set-up-the-project-structure",children:"Step 2: Set Up the Project Structure"}),"\n",(0,t.jsx)(r.p,{children:"Create the following folder structure:"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"basic-api-server/\r\n\u251c\u2500\u2500 routes/\r\n\u2502   \u251c\u2500\u2500 index.get.ts\r\n\u2502   \u2514\u2500\u2500 users/\r\n\u2502       \u2514\u2500\u2500 [id].get.ts\r\n\u251c\u2500\u2500 app.ts\r\n\u251c\u2500\u2500 package.json\r\n\u2514\u2500\u2500 tsconfig.json (if using TypeScript)\n"})}),"\n",(0,t.jsx)(r.h3,{id:"step-3-create-the-entry-point-appts",children:"Step 3: Create the Entry Point (app.ts)"}),"\n",(0,t.jsxs)(r.p,{children:["In the root of your project, create an ",(0,t.jsx)(r.code,{children:"app.ts"})," file with the following code:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",children:"import express from 'express';\r\nimport { Router } from 'file-express-router';\r\n\r\nconst startServer = async () => {\r\n  const app = express();\r\n\r\n  // Define the directory for routes\r\n  const routesDir = `${__dirname}/routes`;\r\n\r\n  // Initialize the router\r\n  const router = await Router({ dir: routesDir });\r\n\r\n  // Mount the router under the `/api` prefix\r\n  app.use('/api', router);\r\n\r\n  // Start the server\r\n  const PORT = 6969;\r\n  app.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n  });\r\n};\r\n\r\nstartServer();\n"})}),"\n",(0,t.jsx)(r.h3,{id:"step-4-create-your-first-route",children:"Step 4: Create Your First Route"}),"\n",(0,t.jsxs)(r.p,{children:["Inside the ",(0,t.jsx)(r.code,{children:"routes"})," directory, create an ",(0,t.jsx)(r.code,{children:"index.get.ts"})," file with a simple route:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/index.get.ts"',children:"import { RequestHandler } from 'express';\r\n\r\nexport const handler: RequestHandler = (req, res) => {\r\n  res.json({ message: 'Welcome to the Basic API Server!' });\r\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This will handle ",(0,t.jsx)(r.code,{children:"GET"})," requests to ",(0,t.jsx)(r.code,{children:"/api/"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"step-5-add-a-dynamic-route",children:"Step 5: Add a Dynamic Route"}),"\n",(0,t.jsxs)(r.p,{children:["Inside the ",(0,t.jsx)(r.code,{children:"routes/users"})," directory, create a ",(0,t.jsx)(r.code,{children:"[id].get.ts"})," file to handle dynamic parameters:"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/users/[id].get.ts"',children:"import { RequestHandler } from 'express';\r\n\r\nexport const handler: RequestHandler = (req, res) => {\r\n  res.json({ userId: req.params.id });\r\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This will handle ",(0,t.jsx)(r.code,{children:"GET"})," requests to ",(0,t.jsx)(r.code,{children:"/api/users/:id"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"step-6-start-the-server",children:"Step 6: Start the Server"}),"\n",(0,t.jsxs)(r.p,{children:["Run your server using ",(0,t.jsx)(r.code,{children:"ts-node"})," (or compile and run with ",(0,t.jsx)(r.code,{children:"node"})," if you\u2019ve set up a build process):"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-bash",children:"npx ts-node app.ts\n"})}),"\n",(0,t.jsx)(r.h3,{id:"step-7-test-your-api",children:"Step 7: Test Your API"}),"\n",(0,t.jsxs)(r.ol,{children:["\n",(0,t.jsxs)(r.li,{children:["Open your browser or use a tool like ",(0,t.jsx)(r.strong,{children:"Postman"})," or ",(0,t.jsx)(r.strong,{children:"curl"}),"."]}),"\n",(0,t.jsxs)(r.li,{children:["Visit ",(0,t.jsx)(r.code,{children:"http://localhost:6969/api/"})," to see the response from the ",(0,t.jsx)(r.code,{children:"index.ts"})," route:","\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{ "message": "Welcome to the Basic API Server!" }\n'})}),"\n"]}),"\n",(0,t.jsxs)(r.li,{children:["Visit ",(0,t.jsx)(r.code,{children:"http://localhost:6969/api/users/123"})," to test the dynamic route:","\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-json",children:'{ "userId": "123" }\n'})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-8-add-more-routes",children:"Step 8: Add More Routes"}),"\n",(0,t.jsxs)(r.p,{children:["You can now add more routes by creating files in the ",(0,t.jsx)(r.code,{children:"routes"})," directory. For example:"]}),"\n",(0,t.jsxs)(r.ul,{children:["\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"routes/posts/index.get.ts"})," \u2192 ",(0,t.jsx)(r.code,{children:"GET /api/posts"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"routes/posts/[slug].get.ts"})," \u2192 ",(0,t.jsx)(r.code,{children:"GET /api/posts/:slug"})]}),"\n",(0,t.jsxs)(r.li,{children:[(0,t.jsx)(r.code,{children:"routes/admin/dashboard.get.ts"})," \u2192 ",(0,t.jsx)(r.code,{children:"GET /api/admin/dashboard"})]}),"\n"]}),"\n",(0,t.jsx)(r.h3,{id:"step-9-add-middleware-optional",children:"Step 9: Add Middleware (Optional)"}),"\n",(0,t.jsxs)(r.p,{children:["To add middleware, create a ",(0,t.jsx)(r.code,{children:"index.middleware.ts"})," file in any directory. For example, in ",(0,t.jsx)(r.code,{children:"routes/users/index.middleware.ts"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/users/index.middleware.ts"',children:"import { RequestHandler } from 'express';\r\n\r\nexport const handler: RequestHandler = (req, res, next) => {\r\n  console.log('Middleware running for /api/users routes');\r\n  next();\r\n};\n"})}),"\n",(0,t.jsxs)(r.p,{children:["This middleware will run for all routes under ",(0,t.jsx)(r.code,{children:"/api/users"}),"."]}),"\n",(0,t.jsx)(r.h3,{id:"step-10-add-error-handling-optional",children:"Step 10: Add Error Handling (Optional)"}),"\n",(0,t.jsxs)(r.p,{children:["To handle errors, create an ",(0,t.jsx)(r.code,{children:"index.error.ts"})," file in any directory. For example, in ",(0,t.jsx)(r.code,{children:"routes/index.error.ts"}),":"]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/index.error.ts"',children:"import { ErrorRequestHandler } from 'express';\r\n\r\nexport const handler: ErrorRequestHandler = (err, req, res, next) => {\r\n  res.status(500).json({ error: 'Something went wrong!' });\r\n};\n"})}),"\n",(0,t.jsx)(r.h2,{id:"final-project-structure",children:"Final Project Structure"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{children:"basic-api-server/\r\n\u251c\u2500\u2500 routes/\r\n\u2502   \u251c\u2500\u2500 index.get.ts\r\n\u2502   \u251c\u2500\u2500 users/\r\n\u2502   \u2502   \u251c\u2500\u2500 [id].get.ts\r\n\u2502   \u2502   \u2514\u2500\u2500 index.middleware.ts\r\n\u2502   \u2514\u2500\u2500 index.error.ts\r\n\u251c\u2500\u2500 app.ts\r\n\u251c\u2500\u2500 package.json\r\n\u2514\u2500\u2500 tsconfig.json (if using TypeScript)\n"})}),"\n",(0,t.jsxs)(r.p,{children:["You\u2019ve now built a ",(0,t.jsx)(r.strong,{children:"basic API server"})," using ",(0,t.jsx)(r.strong,{children:"File Express Router"}),"!"]})]})}function p(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,r,s)=>{s.d(r,{R:()=>o,x:()=>l});var n=s(6540);const t={},i=n.createContext(t);function o(e){const r=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),n.createElement(i.Provider,{value:r},e.children)}}}]);