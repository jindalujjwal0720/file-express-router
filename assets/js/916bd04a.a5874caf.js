"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[32],{7055:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"tutorials/basic-authentication","title":"Authentication System","description":"In this tutorial, you\u2019ll learn how to implement a basic authentication system using File Express Router. We\u2019ll cover user registration, login, and protected routes using JSON Web Tokens (JWT). By the end, you\u2019ll have a working authentication system integrated into your API.","source":"@site/docs/tutorials/basic-authentication.md","sourceDirName":"tutorials","slug":"/tutorials/basic-authentication","permalink":"/file-express-router/docs/tutorials/basic-authentication","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/tutorials/basic-authentication.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Basic API Server","permalink":"/file-express-router/docs/tutorials/basic-api"},"next":{"title":"API Reference","permalink":"/file-express-router/docs/api"}}');var s=n(4848),i=n(8453);const a={sidebar_position:2},o="Authentication System",l={},d=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Step 1: Install Additional Dependencies",id:"step-1-install-additional-dependencies",level:3},{value:"Step 2: Set Up Environment Variables",id:"step-2-set-up-environment-variables",level:3},{value:"Step 3: Update Project Structure",id:"step-3-update-project-structure",level:3},{value:"Step 4: Create Utility Functions",id:"step-4-create-utility-functions",level:3},{value:"Step 5: Create Authentication Middleware",id:"step-5-create-authentication-middleware",level:3},{value:"Step 6: Create Authentication Routes",id:"step-6-create-authentication-routes",level:3},{value:"Step 7: Update app.ts",id:"step-7-update-appts",level:3},{value:"Step 9: Test Your Authentication System",id:"step-9-test-your-authentication-system",level:3},{value:"Final Project Structure",id:"final-project-structure",level:2}];function c(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.header,{children:(0,s.jsx)(r.h1,{id:"authentication-system",children:"Authentication System"})}),"\n",(0,s.jsxs)(r.p,{children:["In this tutorial, you\u2019ll learn how to implement a ",(0,s.jsx)(r.strong,{children:"basic authentication system"})," using ",(0,s.jsx)(r.strong,{children:"File Express Router"}),". We\u2019ll cover user registration, login, and protected routes using JSON Web Tokens (JWT). By the end, you\u2019ll have a working authentication system integrated into your API."]}),"\n",(0,s.jsx)(r.h2,{id:"prerequisites",children:"Prerequisites"}),"\n",(0,s.jsx)(r.p,{children:"Before starting, ensure you have the following installed:"}),"\n",(0,s.jsxs)(r.ul,{children:["\n",(0,s.jsx)(r.li,{children:"Node.js (v16 or higher)"}),"\n",(0,s.jsx)(r.li,{children:"npm or yarn"}),"\n",(0,s.jsx)(r.li,{children:"TypeScript (optional but recommended)"}),"\n",(0,s.jsxs)(r.li,{children:["Basic understanding of ",(0,s.jsx)(r.strong,{children:"File Express Router"})," (from the previous tutorial)"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"step-1-install-additional-dependencies",children:"Step 1: Install Additional Dependencies"}),"\n",(0,s.jsx)(r.p,{children:"We'll use the following packages for authentication:"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"jsonwebtoken"}),": For generating and verifying JWTs."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"bcrypt"}),": For hashing passwords."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"dotenv"}),": For managing environment variables."]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"Install them using npm or yarn:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"npm install jsonwebtoken bcrypt dotenv\r\nnpm install --save-dev @types/jsonwebtoken @types/bcrypt\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-2-set-up-environment-variables",children:"Step 2: Set Up Environment Variables"}),"\n",(0,s.jsxs)(r.p,{children:["Create a ",(0,s.jsx)(r.code,{children:".env"})," file in the root of your project to store sensitive information:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-env",metastring:'title=".env"',children:"JWT_SECRET=your_jwt_secret_key\r\nPORT=6969\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-3-update-project-structure",children:"Step 3: Update Project Structure"}),"\n",(0,s.jsx)(r.p,{children:"Update your project structure to include authentication-related files:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"basic-api-server/\r\n\u251c\u2500\u2500 routes/\r\n\u2502   \u251c\u2500\u2500 auth/\r\n\u2502   \u2502   \u251c\u2500\u2500 register.post.ts\r\n\u2502   \u2502   \u251c\u2500\u2500 login.post.ts\r\n\u2502   \u2514\u2500\u2500 index.error.ts\r\n\u2502   \u251c\u2500\u2500 index.get.ts\r\n\u2502   \u251c\u2500\u2500 users/\r\n\u2502   \u2502   \u251c\u2500\u2500 auth.middleware.ts\r\n\u2502   \u2502   \u2514\u2500\u2500 [id].get.ts\r\n\u251c\u2500\u2500 utils/\r\n\u2502   \u2514\u2500\u2500 auth.ts\r\n\u251c\u2500\u2500 app.ts\r\n\u251c\u2500\u2500 .env\r\n\u251c\u2500\u2500 package.json\r\n\u2514\u2500\u2500 tsconfig.json (if using TypeScript)\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-4-create-utility-functions",children:"Step 4: Create Utility Functions"}),"\n",(0,s.jsxs)(r.p,{children:["In the ",(0,s.jsx)(r.code,{children:"utils/auth.ts"})," file, add helper functions for hashing passwords and generating JWTs:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",metastring:'title="utils/auth.ts"',children:"import bcrypt from 'bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst JWT_SECRET = process.env.JWT_SECRET || 'your_jwt_secret_key';\r\n\r\n// Hash a password\r\nexport const hashPassword = async (password: string): Promise<string> => {\r\n  const saltRounds = 10;\r\n  return await bcrypt.hash(password, saltRounds);\r\n};\r\n\r\n// Compare a password with its hash\r\nexport const comparePassword = async (\r\n  password: string,\r\n  hash: string,\r\n): Promise<boolean> => {\r\n  return await bcrypt.compare(password, hash);\r\n};\r\n\r\n// Generate a JWT\r\nexport const generateToken = (userId: string): string => {\r\n  return jwt.sign({ userId }, JWT_SECRET, { expiresIn: '1h' });\r\n};\r\n\r\n// Verify a JWT\r\nexport const verifyToken = (token: string): { userId: string } | null => {\r\n  try {\r\n    return jwt.verify(token, JWT_SECRET) as { userId: string };\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-5-create-authentication-middleware",children:"Step 5: Create Authentication Middleware"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/users/auth.middleware.ts"',children:"import { RequestHandler } from 'express';\r\nimport { verifyToken } from '../../utils/auth';\r\n\r\nexport const handler: RequestHandler = (req, res, next) => {\r\n  const token = req.headers.authorization?.split(' ')[1];\r\n\r\n  if (!token) {\r\n    return res.status(401).json({ error: 'No token provided' });\r\n  }\r\n\r\n  const decoded = verifyToken(token);\r\n\r\n  if (!decoded) {\r\n    return res.status(401).json({ error: 'Invalid token' });\r\n  }\r\n\r\n  // Attach the user ID to the request object\r\n  req.userId = decoded.userId;\r\n  next();\r\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-6-create-authentication-routes",children:"Step 6: Create Authentication Routes"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/auth/register.post.ts"',children:"import { RequestHandler } from 'express';\r\nimport { hashPassword } from '../../utils/auth';\r\n\r\n// In-memory \"database\" for demonstration purposes\r\nconst users: { [key: string]: { password: string } } = {};\r\n\r\nexport const handler: RequestHandler = async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  if (!username || !password) {\r\n    return res\r\n      .status(400)\r\n      .json({ error: 'Username and password are required' });\r\n  }\r\n\r\n  if (users[username]) {\r\n    return res.status(400).json({ error: 'Username already exists' });\r\n  }\r\n\r\n  const hashedPassword = await hashPassword(password);\r\n  users[username] = { password: hashedPassword };\r\n\r\n  res.status(201).json({ message: 'User registered successfully' });\r\n};\n"})}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",metastring:'title="routes/auth/login.post.ts"',children:"import { RequestHandler } from 'express';\r\nimport { comparePassword, generateToken } from '../../utils/authUtils';\r\n\r\nconst users: { [key: string]: { password: string } } = {\r\n  // Example user for testing\r\n  admin: { password: '$2b$10$...' }, // Replace with a real hashed password\r\n};\r\n\r\nexport const handler: RequestHandler = async (req, res) => {\r\n  const { username, password } = req.body;\r\n\r\n  if (!username || !password) {\r\n    return res\r\n      .status(400)\r\n      .json({ error: 'Username and password are required' });\r\n  }\r\n\r\n  const user = users[username];\r\n\r\n  if (!user || !(await comparePassword(password, user.password))) {\r\n    return res.status(401).json({ error: 'Invalid credentials' });\r\n  }\r\n\r\n  const token = generateToken(username);\r\n  res.json({ token });\r\n};\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-7-update-appts",children:"Step 7: Update app.ts"}),"\n",(0,s.jsxs)(r.p,{children:["Update your ",(0,s.jsx)(r.code,{children:"app.ts"})," file to use JSON body parsing and environment variables:"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-typescript",metastring:'title="app.ts"',children:"import express from 'express';\r\nimport { Router } from 'file-express-router';\r\nimport dotenv from 'dotenv';\r\n\r\ndotenv.config();\r\n\r\nconst startServer = async () => {\r\n  const app = express();\r\n\r\n  // highlight-start\r\n  // Middleware for JSON body parsing\r\n  app.use(express.json());\r\n  // highlight-end\r\n\r\n  const routesDir = `${__dirname}/routes`;\r\n  const router = await Router({ dir: routesDir });\r\n  app.use('/api', router);\r\n\r\n  const PORT = process.env.PORT || 6969;\r\n  app.listen(PORT, () => {\r\n    console.log(`Server is running on http://localhost:${PORT}`);\r\n  });\r\n};\r\n\r\nstartServer();\n"})}),"\n",(0,s.jsx)(r.h3,{id:"step-9-test-your-authentication-system",children:"Step 9: Test Your Authentication System"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Start the server:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:"npx ts-node app.ts\n"})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Register a new user:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'curl -X POST http://localhost:6969/api/auth/register \\\r\n-H "Content-Type: application/json" \\\r\n-d \'{"username": "admin", "password": "password123"}\'\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Log in to get a token:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'curl -X POST http://localhost:6969/api/auth/login \\\r\n-H "Content-Type: application/json" \\\r\n-d \'{"username": "admin", "password": "password123"}\'\n'})}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"Access a protected route using the token:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-bash",children:'curl http://localhost:6969/api/users/123 \\\r\n-H "Authorization: Bearer <your_token>"\n'})}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h2,{id:"final-project-structure",children:"Final Project Structure"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{children:"basic-api-server/\r\n\u251c\u2500\u2500 routes/\r\n\u2502   \u251c\u2500\u2500 auth/\r\n\u2502   \u2502   \u251c\u2500\u2500 register.post.ts\r\n\u2502   \u2502   \u251c\u2500\u2500 login.post.ts\r\n\u2502   \u2514\u2500\u2500 index.error.ts\r\n\u2502   \u251c\u2500\u2500 index.get.ts\r\n\u2502   \u251c\u2500\u2500 users/\r\n\u2502   \u2502   \u251c\u2500\u2500 auth.middleware.ts\r\n\u2502   \u2502   \u2514\u2500\u2500 [id].get.ts\r\n\u251c\u2500\u2500 utils/\r\n\u2502   \u2514\u2500\u2500 auth.ts\r\n\u251c\u2500\u2500 app.ts\r\n\u251c\u2500\u2500 .env\r\n\u251c\u2500\u2500 package.json\r\n\u2514\u2500\u2500 tsconfig.json (if using TypeScript)\n"})}),"\n",(0,s.jsxs)(r.p,{children:["You\u2019ve now built a ",(0,s.jsx)(r.strong,{children:"basic authentication system"})," using ",(0,s.jsx)(r.strong,{children:"File Express Router"}),"!"]})]})}function u(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>o});var t=n(6540);const s={},i=t.createContext(s);function a(e){const r=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function o(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:r},e.children)}}}]);